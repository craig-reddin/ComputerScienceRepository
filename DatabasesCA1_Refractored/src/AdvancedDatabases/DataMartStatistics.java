/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package AdvancedDatabases;

import java.awt.Color;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;

public class DataMartStatistics extends javax.swing.JFrame {

    String url = "jdbc:sqlite:c:/mydb/creddin.db"; //creates a URL for the database
    String url2 = "jdbc:sqlite:c:/myDM/creddin.db"; //creates a URL for the database
    ArrayList<Double> tSales = new ArrayList<>();
    ArrayList<Double> tReturns = new ArrayList<>();
    ArrayList<Double> tProfit = new ArrayList<>();
    ArrayList<Integer> aQu = new ArrayList<>();
    ArrayList<Integer> bQu = new ArrayList<>();
    ArrayList<Integer> cQu = new ArrayList<>();
    ArrayList<Integer> b = new ArrayList<>();
    ArrayList<Double> returnsA = new ArrayList<>();
    ArrayList<Double> returnsB = new ArrayList<>();
    ArrayList<Double> returnsC = new ArrayList<>();
    ArrayList<Double> profitA = new ArrayList<>();
    ArrayList<Double> profitB = new ArrayList<>();
    ArrayList<Double> profitC = new ArrayList<>();
    ArrayList<Double> aQ5 = new ArrayList<>();
    double profitTotal1 = 0;
    double profitTotal2 = 0;
    double profitTotal3 = 0;
    double totalP=0;

    int dublin = 01;
    int belfast = 02;
    int cork = 03;
    int count = 0;
    int count2 = 0;
    int count3 = 0;
    String communityWinner;
    double populationAverageA = 0;
    double populationAverageB = 0;
    double populationAverageC = 0;
    double populationDub = 0;
    double populationBelfast = 0;
    double populationCork = 0;
    double b1p;
    double b2p;
    double b3p;
    double returnsAA;
    double returnsBB;
    double returnsCC;
    ArrayList<Double> branch1 = new ArrayList<>();
    double branch11;
    double branch22;
    double branch33;

    ArrayList<Double> branch2 = new ArrayList<>();
    ArrayList<Double> branch3 = new ArrayList<>();
    double saleT;
    double returnT;
    double profitT;

    /**
     * Creates new form DataMartStatistics
     */
    public DataMartStatistics() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        q1 = new javax.swing.JButton();
        q2 = new javax.swing.JButton();
        q3 = new javax.swing.JButton();
        q4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        createDatabase = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        heading = new javax.swing.JLabel();
        q5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 153, 255));

        q1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        q1.setText("Query 1");
        q1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                q1ActionPerformed(evt);
            }
        });

        q2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        q2.setText("Query 2");
        q2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                q2ActionPerformed(evt);
            }
        });

        q3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        q3.setText("Query 3");
        q3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                q3ActionPerformed(evt);
            }
        });

        q4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        q4.setText("Query 4");
        q4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                q4ActionPerformed(evt);
            }
        });

        output.setColumns(20);
        output.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        createDatabase.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        createDatabase.setText("Create Database");
        createDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDatabaseActionPerformed(evt);
            }
        });

        exit.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        exit.setText("Exit Data Mart");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 28)); // NOI18N
        jLabel1.setText("Purchasing Orders Statistics - Brown Thomas");

        heading.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N

        q5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        q5.setText("Query 5");
        q5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                q5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 769, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(createDatabase)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(exit)
                                .addGap(12, 12, 12)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(q1)
                                        .addGap(18, 18, 18)
                                        .addComponent(q2)
                                        .addGap(18, 18, 18)
                                        .addComponent(q3)
                                        .addGap(18, 18, 18)
                                        .addComponent(q4))
                                    .addComponent(q5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(heading, javax.swing.GroupLayout.PREFERRED_SIZE, 666, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(149, 149, 149)
                        .addComponent(jLabel1)))
                .addContainerGap(53, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 107, Short.MAX_VALUE)
                .addComponent(heading, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(q4)
                    .addComponent(q3)
                    .addComponent(q2)
                    .addComponent(q1)
                    .addComponent(createDatabase)
                    .addComponent(exit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(q5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 23, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void q4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_q4ActionPerformed
        heading.setText("Staffs average percentage of Sales Made In all Branches");
        output.setText("");
        double totalSales = branch11 + branch22 + branch33;
        //Average in COmpany Average in Brance

        b1p = branch11 / totalSales * 100;
        b2p = branch22 / totalSales * 100;
        b3p = branch33 / totalSales * 100;

        double branchaAv = b1p / 3;
        double branchbAv = b2p / 3;
        double branchcAv = b3p / 2;

        output.append("Average sales made Per Dublin Staff Member is " + branchaAv + "%\n"
                + "Average sales made Per Belfast Staff Member is " + branchbAv + "%\n"
                + "Average sales made Per Cork Staff Member is " + branchcAv + "%\n");
        mainQ3(branchaAv, branchbAv, branchcAv);

        PieChart p = new PieChart();
        p.main(null);

    }//GEN-LAST:event_q4ActionPerformed

    public void mainQ3(double a, double b, double c) {

        try ( Connection conn = DriverManager.getConnection(url2)) {
            PreparedStatement st4 = conn.prepareStatement("SELECT * FROM StaffPercentage;");

            ResultSet rs4 = st4.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs4.next()) { //iterate rs
                String s = rs4.getString(1);
                String s1 = rs4.getString(2);
                String s2 = rs4.getString(3);
                String s3 = rs4.getString(4);
                cQu.add(Integer.parseInt(s));

            }
            System.out.println(a);
            Statement statement = conn.createStatement();
            statement.executeUpdate("INSERT INTO StaffPercentage VALUES(" + cQu.size() + 1 + "," + a + "," + b + "," + c + ",'" + java.time.LocalDate.now().toString() + "');");
            JOptionPane.showMessageDialog(null, "Account Successfully Made...");

            PreparedStatement st5 = conn.prepareStatement("SELECT * FROM StaffPercentage;");

            ResultSet rs5 = st5.executeQuery();
            while (rs5.next()) {
                String s = rs5.getString(1);
                String s1 = rs5.getString(2);
                String s2 = rs5.getString(3);
                String s3 = rs5.getString(4);
                String s4 = rs5.getString(5);

                output.setText("Branch Staff Average Percent\nId: " + s + "\nDublin : " + s1 + "%\nBealfast Sales: " + s2 + "%\nCork Sales: " + s3
                        + "\nMade on: " + s4);
            }

            cQu.clear();

            // This will ensure the catch will be initiated and no values stored..Error message for user
        } //maybe statement.execute? executeUpdate also works
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }//end try catch
    }
    private void q3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_q3ActionPerformed
        heading.setText("Percentage Returns Per Branch For April 2022");
        output.setText("");
        try ( Connection conn = DriverManager.getConnection(url)) {

            PreparedStatement st = conn.prepareStatement("SELECT PurchasesTable.ReturnsTotal, Date.TDate FROM PurchasesTable"
                    + " INNER JOIN Date ON PurchasesTable.DateId = Date.DateId where TDate between '2022-03-31' and '2022-05-01' and BranchId =01;");
            returnsA.clear();
            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                String s = rs.getString(1);
                String s1 = rs.getString(2);
                if (Double.parseDouble(s) > 0) {
                    returnsA.add(Double.parseDouble(s));

                }
            }
            for (int i = 0; i < returnsA.size(); i++) {
                double b2 = returnsA.get(i);
                returnsAA = returnsAA + b2;
            }
            PreparedStatement st2 = conn.prepareStatement(
                    "SELECT PurchasesTable.ReturnsTotal, Date.TDate FROM PurchasesTable "
                    + "INNER JOIN Date ON PurchasesTable.DateId = Date.DateId where TDate between '2022-03-31' and '2022-05-01' and BranchId =02;");
            returnsB.clear();
            ResultSet rs2 = st2.executeQuery();
            while (rs2.next()) {
                String s = rs2.getString(1);
                String s1 = rs2.getString(2);
                if (Double.parseDouble(s) > 0) {
                    returnsB.add(Double.parseDouble(s));

                }
            }
            for (int i = 0; i < returnsB.size(); i++) {
                double b1 = returnsB.get(i);
                returnsBB = returnsBB + b1;
            }
            PreparedStatement st3 = conn.prepareStatement("SELECT PurchasesTable.ReturnsTotal, Date.TDate FROM PurchasesTable"
                    + " INNER JOIN Date ON PurchasesTable.DateId = Date.DateId where TDate between '2022-03-31' and '2022-05-01' and BranchId =03;");
            returnsC.clear();
            ResultSet rs3 = st3.executeQuery();
            while (rs3.next()) {
                String s = rs3.getString(1);
                String s1 = rs3.getString(2);

                if (Double.parseDouble(s) > 0) {
                    returnsC.add(Double.parseDouble(s));
                }
            }
            for (int i = 0; i < returnsC.size(); i++) {
                double b1 = returnsC.get(i);

                returnsCC = returnsCC + b1;

            }
            double aPer;
            double cPer;
            double bPer;
            double returnsT;
            returnsT = returnsAA + returnsBB + returnsCC;
            System.out.println(returnsT);
            System.out.println(returnsAA);
            aPer = returnsAA / returnsT * 100;
            bPer = returnsBB / returnsT * 100;
            cPer = returnsCC / returnsT * 100;

            mainQ2(aPer, bPer, cPer);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_q3ActionPerformed

    public void mainQ2(double a, double b, double c) {

        try ( Connection conn = DriverManager.getConnection(url2)) {
            PreparedStatement st4 = conn.prepareStatement("SELECT * FROM ReturnPercentage;");

            ResultSet rs4 = st4.executeQuery();
            while (rs4.next()) {
                String s = rs4.getString(1);
                String s1 = rs4.getString(2);
                String s2 = rs4.getString(3);
                String s3 = rs4.getString(4);
                bQu.add(Integer.parseInt(s));

            }
            long millis = System.currentTimeMillis();

            // creating a new object of the class Date  
            java.sql.Date date = new java.sql.Date(millis);

            System.out.println(date);
            Statement statement = conn.createStatement();
            statement.executeUpdate("INSERT INTO ReturnPercentage VALUES(" + bQu.size() + 1 + "," + a + "," + b + "," + c + ",'" + date.toString() + "');");
            JOptionPane.showMessageDialog(null, "ReturnsPercentage Table was Updated in the Data Mart.");

            PreparedStatement st5 = conn.prepareStatement("SELECT * FROM ReturnPercentage;");

            ResultSet rs5 = st5.executeQuery();
            while (rs5.next()) {
                String s = rs5.getString(1);
                String s1 = rs5.getString(2);
                String s2 = rs5.getString(3);
                String s3 = rs5.getString(4);
                String s4 = rs5.getString(5);
                System.out.println(s4);

                output.setText("Branch Returns Percent\nId: " + s + "\nDublin : " + s1 + "%\nBealfast Sales: " + s2 + "%\nCork Sales: " + s3
                        + "\nMade on: " + s4 + "\n");
            }
            bQu.clear();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }//end try catch
    }
    private void q2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_q2ActionPerformed
        heading.setText("Profit Percentage Per Branch");
        output.setText("");
        double totalSales = branch11 + branch22 + branch33;
        try ( Connection conn = DriverManager.getConnection(url)) {

            profitA.clear();
            profitB.clear();
            profitC.clear();
            PreparedStatement st4 = conn.prepareStatement("SELECT ProfitTotal, BranchId FROM PurchasesTable;");
            ResultSet rs4 = st4.executeQuery();

            while (rs4.next()) { //iterate rs
                String s = rs4.getString(1);
                String s1 = rs4.getString(2);

                if (s1.matches("1")) {
                    profitA.add(Double.parseDouble(s));
                     System.out.println(s1);
                }
                if (s1.matches("2")) {
                    profitB.add(Double.parseDouble(s));
                }
                if (s1.matches("3")) {
                    profitC.add(Double.parseDouble(s));
                }
                

            }
            for (int i = 0; i < profitA.size(); i++) {
                profitTotal1 = profitTotal1 + profitA.get(i);
            }
            for (int i = 0; i < profitB.size(); i++) {
                profitTotal2 = profitTotal2 + profitB.get(i);
            }
            for (int i = 0; i < profitC.size(); i++) {
                profitTotal3 = profitTotal3 + profitC.get(i);
            }
            
            totalP= profitTotal1 + profitTotal2 + profitTotal3; 
            
            
            System.out.println(profitTotal1);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }//end try catch

        try ( Connection conn = DriverManager.getConnection(url2)) {

            
            System.out.println(totalSales);
            double branch1p;
            double branch2p;
            double branch3p;

            branch1p = profitTotal1 / totalSales * 100;
            branch2p = profitTotal2 / totalSales * 100;
            branch3p = profitTotal3 / totalSales * 100;
            double total = branch1p + branch2p + branch3p;

            PreparedStatement st4 = conn.prepareStatement("SELECT * FROM BranchProfitPercent;");

            ResultSet rs4 = st4.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs4.next()) { //iterate rs
                String s = rs4.getString(1);
                b.add(Integer.parseInt(s));

            }

            String ss;
            String ss2;
            String ss3;

            System.out.println();
            Statement statement = conn.createStatement();
            statement.executeUpdate("INSERT INTO BranchProfitPercent VALUES(" + b.size() + 1 + ", " + branch1p + ", " + branch2p + ", " + branch3p + ",'" + java.time.LocalDate.now().toString() + "');");
            JOptionPane.showMessageDialog(null, "Data added to Data Mart BranchProfitPercentage Table  "); //let user know 

            PreparedStatement st5 = conn.prepareStatement("SELECT * FROM BranchProfitPercent;");

            ResultSet rs5 = st5.executeQuery();
            while (rs5.next()) {
                String s = rs5.getString(1);
                String s1 = rs5.getString(2);
                String s2 = rs5.getString(3);
                String s3 = rs5.getString(4);
                String s4 = rs5.getString(5);

                output.setText("Dublin's Branch has sold " + s1 + "% of all Profits\n"
                        + "Belfast's Branch has sold " + s2 + "% of all Profits\n"
                        + "Cork's Branch has sold " + s3 + "% of all Profits\n "
                        + "Made on: " + s4);
            }
            b.clear();

            // This will ensure the catch will be initiated and no values stored..Error message for user
        } //maybe statement.execute? executeUpdate also works
        catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }//end try catch


    }//GEN-LAST:event_q2ActionPerformed

    private void q1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_q1ActionPerformed

        try ( Connection conn = DriverManager.getConnection(url)) {
            q2.setEnabled(true);
            q3.setEnabled(true);
            q4.setEnabled(true);
            q1.setEnabled(false);
            
            branch11 = 0.0;
            branch22 = 0.0;
            branch33 = 0.0;
            heading.setText("Branches Total Sales");
            output.setText("");
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st = conn.prepareStatement("SELECT PurchasesTable.PurchaseTotal, PurchasesTable.BranchId, Branch.CommunityPopulation FROM PurchasesTable"
                    + " INNER JOIN Branch ON PurchasesTable.BranchId = Branch.BranchId where PurchasesTable.BranchId = 01;");
            //st.setString(1, str2); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query 
            branch1.clear();
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs.next()) { //iterate rs
                String s = rs.getString(1);
                String s1 = rs.getString(2);
                String s2 = rs.getString(3);//get id from rs, save as s                 

                populationDub = Double.parseDouble(s2);
                branch1.add(Double.parseDouble(s));
                System.out.println(s2);

            }

            System.out.println(populationDub);

            for (int i = 0; i < branch1.size(); i++) {
                double b1 = branch1.get(i);

                branch11 = branch11 + b1;

            }
            populationAverageA = branch11 / populationDub;
            //PreparedStatement – Used to execute parameterized SQL queries
            PreparedStatement st2 = conn.prepareStatement("SELECT PurchasesTable.PurchaseTotal, PurchasesTable.BranchId, Branch.CommunityPopulation FROM PurchasesTable"
                    + " INNER JOIN Branch ON PurchasesTable.BranchId = Branch.BranchId where PurchasesTable.BranchId = 02;");
            //st.setString(1, str2); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query 
            branch2.clear();
            ResultSet rs2 = st2.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs2.next()) { //iterate rs
                String s = rs2.getString(1); //get id from rs, save as s  
                String s1 = rs2.getString(2);
                String s2 = rs2.getString(3);//get id from rs, save as s 

                populationBelfast = Double.parseDouble(s2);
                branch2.add(Double.parseDouble(s));
            }
            for (int i = 0; i < branch2.size(); i++) {
                double b1 = branch2.get(i);

                branch22 = branch22 + b1;
                count2++;
            }
            populationAverageB = branch22 / populationBelfast;

            PreparedStatement st3 = conn.prepareStatement("SELECT PurchasesTable.PurchaseTotal, PurchasesTable.BranchId, Branch.CommunityPopulation FROM PurchasesTable"
                    + " INNER JOIN Branch ON PurchasesTable.BranchId = Branch.BranchId where PurchasesTable.BranchId = 03;");
            //st.setString(1, str2); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query 
            branch3.clear();
            ResultSet rs3 = st3.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs3.next()) { //iterate rs
                String s = rs3.getString(1); //get id from rs, save as s 
                String s1 = rs3.getString(2);
                String s2 = rs3.getString(3);//get id from rs, save as s   

                populationCork = Double.parseDouble(s2);
                branch3.add(Double.parseDouble(s));
                output.append("\nDatabase -Total sales on Purchase Cork Branch: " + Double.parseDouble(s)
                        + "\n");
                count3++;
            }
            for (int i = 0; i < branch3.size(); i++) {
                double b1 = branch3.get(i);

                branch33 = branch33 + b1;

            }

            populationAverageC = branch33 / populationCork;
            System.out.println("D" + populationAverageA);
            System.out.println("B" + populationAverageB);
            System.out.println("C" + populationAverageC);

            if (populationAverageA > populationAverageB && populationAverageA > populationAverageC) {
                communityWinner = "Dublin";
            }
            if (populationAverageB > populationAverageA && populationAverageB > populationAverageC) {
                communityWinner = "Belfast";
            }
            if (populationAverageC > populationAverageA && populationAverageC > populationAverageB) {
                communityWinner = "Cork";
            }

//            if (branch11 > branch22 && branch11 > branch33) {
//                output.append("\nDublin Branch Has Made the Most Sales: €" + branch11 + "\n");
//            }
//            if (branch22 > branch11 && branch22 > branch33) {
//                output.append("\nBelfastBranch Has Made the Most Sales with: €" + branch22 + "\n");
//            }
//            if (branch33 > branch11 && branch33 > branch22) {
//                output.append("\n Cork Branch Has Made the Most Sales with: €" + branch33 + "\n");
//            }
            martQ1();
            double values[] = {branch11, branch22, branch33};
            String branch[] = {"Dublin", "Belfast", "Cork"};
            Color color[] = {Color.red, Color.yellow, Color.blue};
            BarChart a = new BarChart(values, branch, color, "BarChart");
            a.main();

            count = 0;
            count2 = 0;
            count3 = 0;

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }//end try catch


    }//GEN-LAST:event_q1ActionPerformed

    public void martQ1() {
        try ( Connection conn = DriverManager.getConnection(url2)) {

            PreparedStatement st4 = conn.prepareStatement("SELECT * FROM BranchTotalSales;");

            ResultSet rs4 = st4.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs4.next()) { //iterate rs
                String s = rs4.getString(1);
                String s1 = rs4.getString(2);
                String s2 = rs4.getString(3);
                String s3 = rs4.getString(4);
                String s4 = rs4.getString(5);
                aQu.add(Integer.parseInt(s));

            }

            System.out.println("hi");
            System.out.println(String.valueOf(java.time.LocalDate.now()));
            String date11 = String.valueOf(java.time.LocalDate.now());
            System.out.println(date11);
            //Statement – Used to execute string-based SQL queries
            Statement statement = conn.createStatement();
            statement.executeUpdate("INSERT INTO BranchTotalSales VALUES(" + aQu.size() + 1 + ", " + branch11 + ", " + branch22 + ", " + branch33 + ",'" + date11 + "','" + communityWinner + "'" + ");");
            JOptionPane.showMessageDialog(null, "BranchTotalSales Table Information was Inserted"); //let user know 

            PreparedStatement st3 = conn.prepareStatement("SELECT * FROM BranchTotalSales;");
            //st.setString(1, str2); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query 
            branch3.clear();
            ResultSet rs3 = st3.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs3.next()) { //iterate rs
                String s = rs3.getString(1);
                String s1 = rs3.getString(2);
                String s2 = rs3.getString(3);
                String s3 = rs3.getString(4);
                String s4 = rs3.getString(5);
                String s5 = rs3.getString(6);

                output.setText("\nBranch Total Sales\nId: " + s + "\nDublin Sales: " + s1 + "\nBealfast Sales: " + s2 + "\nCork Sales: " + s3
                        + "\n" + "Made on: " + s4 + "\nCommunity Winner is: " + s5);

            }
            aQu.clear();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }//end try catch
    }

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void createDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDatabaseActionPerformed
        q2.setEnabled(false);
        q3.setEnabled(false);
        q4.setEnabled(false);
        new File("c:/mydb/").mkdir(); //creates the folder were the DB will be saved.

        try { //loads driver into memory, just one way of doing it
            Class.forName("org.sqlite.JDBC").newInstance();
        } catch (Exception ex) {
        }//end try catch

        //Makes a connection called conn to the url created earlier
        try ( Connection conn = DriverManager.getConnection(url)) {
            if (conn != null) { //if the connection is not null 
                output.setText("The database has been created."); //change the text on the create DB button
            }//end if

        } catch (SQLException e) {
            System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try catch

        //string to be passes as a statement, creates the table warehouses
        String sqlCreateProductTable = "CREATE TABLE IF NOT EXISTS Product (\n"
                + "	ProductId integer PRIMARY KEY,\n"
                + "	ProductName text,\n"
                + "	ProductCategory text,\n"
                + "	ProductPrice DECIMAL\n"
                + ");";

        String sqlCreateBranchTable = "CREATE TABLE IF NOT EXISTS Branch (\n"
                + "	BranchId integer NOT NULL PRIMARY KEY,\n"
                + "	BranchAddress text,\n"
                + "	BranchTotalSales DECIMAL,\n"
                + "	BranchTotalProfit DECIMAL,\n"
                + "	CommunityPopulation integer\n"
                + ");";

        String sqlCreateCustomerTable = "CREATE TABLE IF NOT EXISTS Customer (\n"
                + "	CustomerId integer NOT NULL PRIMARY KEY,\n"
                + "	CustomerAddress text,\n"
                + "	CustomerName text,\n"
                + "	CustomerNumPurchases integer,\n"
                + "	TotalPurchasesAmount DECIMAL\n"
                + ");";

        String sqlCreateReturnsTable = "CREATE TABLE IF NOT EXISTS Returns (\n"
                + "	ReturnId integer NOT NULL PRIMARY KEY,\n"
                + "	ReturnAmount DECIMAL\n"
                + ");";

        String sqlCreateStaffTable = "CREATE TABLE IF NOT EXISTS Staff (\n"
                + "	StaffId integer NOT NULL PRIMARY KEY,\n"
                + "	StaffName text\n"
                + ");";

        String sqlCreateDateTable = "CREATE TABLE IF NOT EXISTS Date (\n"
                + "	DateId integer NOT NULL PRIMARY KEY,\n"
                + "	TDate DATE \n"
                + ");";

        String sqlCreatePurchasesTable = "CREATE TABLE IF NOT EXISTS PurchasesTable (\n"
                + "	PurchaseId integer NOT NULL PRIMARY KEY,\n"
                + "	ProductId integer,\n"
                + "	BranchId integer,\n"
                + "	CustomerId integer,\n"
                + "	ReturnId integer,\n"
                + "	StaffId integer,\n"
                + "	DateId integer,\n"
                + "	PurchaseTotal DECIMAL,\n"
                + "	ReturnsTotal DECIMAL, \n"
                + "	ProfitTotal DECIMAL, \n"
                + "	FOREIGN KEY (ProductId) \n"
                + "     REFERENCES Product(ProductId), \n"
                + "	FOREIGN KEY (BranchId) \n"
                + "     REFERENCES Branch(BranchId), \n"
                + "	FOREIGN KEY (CustomerId) \n"
                + "     REFERENCES Customer(CustomerId), \n"
                + "	FOREIGN KEY (ReturnId) \n"
                + "     REFERENCES Returns(ReturnId), \n"
                + "	FOREIGN KEY (StaffId) \n"
                + "     REFERENCES Staff(StaffId), \n"
                + "	FOREIGN KEY (DateId) \n"
                + "     REFERENCES Date(DateId)\n"
                + ");";

        //Makes a connection called conn to the url created earlier
        //may not be needed again if used already, no harm in retrying
        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt = conn.createStatement()) { //makes a statement object called stmt
            stmt.execute(sqlCreateProductTable); //passes the sql string statement to stmt

        } catch (SQLException e) {
            System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try catch

        Statement stmt = null;
        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt2 = conn.createStatement()) { //makes a statement object called stmt
            stmt2.execute(sqlCreateBranchTable); //passes the sql string statement to stmt

        } catch (SQLException e) {
            System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try catch

        Statement stmt2 = null;

        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt3 = conn.createStatement()) { //makes a statement object called stmt
            stmt3.execute(sqlCreateCustomerTable); //passes the sql string statement to stmt

        } catch (SQLException e) {
            System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try catch

        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt4 = conn.createStatement()) { //makes a statement object called stmt
            stmt4.execute(sqlCreateReturnsTable); //passes the sql string statement to stmt

        } catch (SQLException e) {
            System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try catch

        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt5 = conn.createStatement()) { //makes a statement object called stmt
            stmt5.execute(sqlCreateStaffTable); //passes the sql string statement to stmt

        } catch (SQLException e) {
            System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try catch

        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt6 = conn.createStatement()) { //makes a statement object called stmt
            stmt6.execute(sqlCreatePurchasesTable); //passes the sql string statement to stmt

        } catch (SQLException e) {
            System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try catch
        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt7 = conn.createStatement()) { //makes a statement object called stmt
            stmt7.execute(sqlCreateDateTable); //passes the sql string statement to stmt

        } catch (SQLException e) {
            System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try catch

        try {
            Connection conn = DriverManager.getConnection(url);
            stmt = conn.createStatement();
            //add to warehouses table

            stmt.executeUpdate("INSERT INTO Product" + " VALUES(01, 'Gucci Watch','Watches',500.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(02, 'Gucci Scarf','Clothing',300.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(03, 'Tommy Jeans','Clothing',250.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(04, 'Dior Perfume','Fragrence',110.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(05, 'Polo Dress','Clothing',750.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(06, 'Ted Baker After Shave','Fragrence',75.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(07, 'Dior Watch','Watches',550.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(08, 'Gucci Hat','Clothing',510.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(09, 'Diamond Ring','Jewellery',2500.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(10, 'Tommy Watch','Watches',800.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(11, 'Miss Missi Socks','Clothing',500.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(12, 'Dior Hat','Clothing',320.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(13, 'Ralph Lauren Aftershave','Fragrence',150.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(14, 'Alo Yoga, Yoga Pants','Clothing',120.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(15, 'Boss Slippers','Clothing',100.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(16, 'Gucci Watch II','Watches',1500.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(17, 'Calvin Klein Aftershave','Fragrance',100.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(18, 'DKNY Sun Glasses','Optical',350.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(19, 'Gala Gloves','Clothing', 200.00)");
            stmt.executeUpdate("INSERT INTO Product" + " VALUES(20, 'Gucci Watch III','Watches', 2500.00)");

        } catch (SQLException e) {
            System.out.print(e);

        }//end try catch
        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt1 = conn.createStatement()) {
            stmt1.execute(sqlCreateBranchTable);

            stmt1.executeUpdate("INSERT INTO Branch" + " VALUES(01,'Dublin',500.00,300.00,544107)");
            stmt1.executeUpdate("INSERT INTO Branch" + " VALUES(02,'Belfast',500.00,300.00,300300)");
            stmt1.executeUpdate("INSERT INTO Branch" + " VALUES(03,'Cork',500.00,300.00,124391)");

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }//end try ca

        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt3 = conn.createStatement()) {
            stmt3.execute(sqlCreateCustomerTable);

            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(01,'Dublin','Stacy',2, 1300.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(02,'Dublin','John',2, 325.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(03,'Dublin','Frank',2, 2700.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(04,'Dublin','Peter',2, 500.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(05,'Dublin','Jenny',1, 500.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(06,'Dublin','Harry',1, 500.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(07,'Belfast','Steve',2, 2250.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(08,'Belfast','Richard',2, 430.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(09,'Belfast','Larry',1, 150.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(10,'Belfast','Karen',1, 1500.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(11,'Belfast','Pamela',2, 2800.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(12,'Belfast','Sean',1, 800.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(13,'Belfast','Harvey',2, 860.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(14,'Cork','Bob',2, 2300.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(15,'Cork','Dyllon',2, 2610.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(16,'Cork','Niamh',1, 120.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(17,'Cork','Phillip',2, 620.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(18,'Cork','Jason',2, 1575.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(19,'Cork','Jared',1, 100.00)");
            stmt3.executeUpdate("INSERT INTO Customer" + " VALUES(20,'Cork','Julie',2, 400.00)");
        } catch (SQLException e) {
            System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try ca

        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt4 = conn.createStatement()) { //makes a statement object called st   
            stmt4.execute(sqlCreateReturnsTable);
            stmt4.executeUpdate("INSERT INTO Returns VALUES(01,750.00)");//cus 1
            stmt4.executeUpdate("INSERT INTO Returns VALUES(02,500.00)");//cus 5
            stmt4.executeUpdate("INSERT INTO Returns VALUES(03,150.00)");//cus 9
            stmt4.executeUpdate("INSERT INTO Returns VALUES(04,800.00)");//cus 14
            stmt4.executeUpdate("INSERT INTO Returns VALUES(05,300.00)");//cus 17
            stmt4.executeUpdate("INSERT INTO Returns VALUES(06,100.00)");//cus 19    

            //Total Returns = 1625
            //Total Profit = 22690 - 1625 = 23,645.
            // 6.43% Returns on Sale Amound 
            //32 Purchases/purchase orders.
        } catch (SQLException e) {
            System.out.println(e.getMessage()); //println for catching error, popup would be better
        }//end try ca

        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt5 = conn.createStatement()) { //makes a statement object called st   
            stmt5.execute(sqlCreateStaffTable);

            stmt5.executeUpdate("INSERT INTO Staff VALUES(01,'Francestco')");//dub
            stmt5.executeUpdate("INSERT INTO Staff VALUES(02,'Mariana')");//dub
            stmt5.executeUpdate("INSERT INTO Staff VALUES(03,'Gustavo')");//dub
            stmt5.executeUpdate("INSERT INTO Staff VALUES(04,'Zues')");//Belfast
            stmt5.executeUpdate("INSERT INTO Staff VALUES(05,'Hercules')");//B
            stmt5.executeUpdate("INSERT INTO Staff VALUES(06,'Prometheus')");//B
            stmt5.executeUpdate("INSERT INTO Staff VALUES(07,'Madusa')");//Cork
            stmt5.executeUpdate("INSERT INTO Staff VALUES(08,'Cupid')");//C

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }//end try ca
        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt6 = conn.createStatement()) {
            stmt6.execute(sqlCreatePurchasesTable);
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(01,05,01,01,01,01,01,750.00,750.00,0.00)");

            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(02,07,01,01,null,01,02,550.00,0.00,550.00)");

            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(03,03,01,02,null,01,03,250.00,0.00,250.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(04,06,01,02,null,01,04,75.00,0.00,75.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(05,20,01,03,null,02,05,2500.00,0.00,2500.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(06,19,01,03,null,02,06,200.00,0.00,200.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(07,18,01,04,null,02,07,350.00,0.00,350.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(08,13,01,04,null,03,08,150.00,0.00,150.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(09,11,01,05,02,03,09,500.00,500.00,0.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(10,01,01,06,null,03,10,500.00,0.00,500.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(11,16,02,07,null,04,10,1500.00,0.00,1500.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(12,05,02,07,null,04,11,750.00,0.00,750.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(13,04,02,08,null,04,12,110.00,0.00,110.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(14,12,02,08,null,05,13,320.00,0.00,320.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(15,13,02,09,03,05,14,500.00,500.00,0.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(16,16,02,10,null,05,15,1500.00,0.00,1500.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(17,20,02,11,null,06,16,2500.00,0.00,2500.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(18,02,02,11,null,06,17,300.00,7.00,300.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(19,10,02,12,null,06,18,800.00,0.00,800.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(20,18,02,13,null,06,19,350.00,0.00,350.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(21,08,02,13,null,06,20,510.00,0.00,510.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(22,10,03,14,04,07,22,800.00,800.00,0.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(23,16,03,14,null,07,23,1500.00,0.00,1500.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(24,04,03,15,null,07,24,2500.00,0.00,2500.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(25,14,03,15,null,07,25,110.00,0.00,110.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(26,02,03,16,null,07,26,120.00,0.00,120.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(27,12,03,17,05,08,27,300.00,300.00,0.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(28,02,03,17,null,08,28,320.00,0.00,320.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(29,06,03,18,null,08,29,75.00,0.00,75.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(30,16,03,18,null,09,30,1500.00,0.00,1500.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(31,15,03,19,06,09,31,100.00,100.00,0.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(32,17,03,20,null,09,32,100.00,0.00,100.00)");
            stmt6.executeUpdate("INSERT INTO PurchasesTable VALUES(33,02,03,20,null,09,33,300.00,0.00,300.00)");

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }//end try ca

        try ( Connection conn = DriverManager.getConnection(url);  Statement stmt7 = conn.createStatement()) {
            stmt7.execute(sqlCreateBranchTable);

            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(01,'2022-04-01')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(02,'2022-04-02')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(03,'2022-04-03')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(04,'2022-04-04')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(05,'2022-04-05')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(06,'2022-04-06')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(07,'2022-04-07')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(08,'2022-04-07')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(09,'2022-04-08')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(10,'2022-04-08')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(11,'2022-04-09')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(12,'2022-04-10')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(13,'2022-04-11')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(14,'2022-04-12')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(15,'2022-04-13')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(16,'2022-04-14')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(17,'2022-04-15')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(18,'2022-04-16')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(19,'2022-04-16')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(20,'2022-04-17')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(21,'2022-04-18')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(22,'2022-04-19')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(23,'2022-04-20')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(24,'2022-04-21')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(25,'2022-04-22')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(26,'2022-04-23')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(27,'2022-04-24')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(28,'2022-04-25')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(29,'2022-04-26')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(30,'2022-04-27')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(31,'2022-04-28')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(32,'2022-04-29')");
            stmt7.executeUpdate("INSERT INTO Date" + " VALUES(33,'2022-04-30')");

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        new File("c:/myDM/").mkdir();
        try {
            Class.forName("org.sqlite.JDBC").newInstance();
        } catch (Exception ex) {
        }
        try ( Connection conn = DriverManager.getConnection(url2)) {
            if (conn != null) {
                output.setText("The database & datamart has been created.");
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        String staffSales = "CREATE TABLE IF NOT EXISTS StaffPercentage (\n"
                + "	StaffPercentageId integer PRIMARY KEY,\n"
                + "	DublinStaffPercentage double,\n"
                + "	BelfastStaffPercentage double,\n"
                + "	CorkStaffPercentage double,\n"
                + "	DateRequestStaff text\n"
                + ");";
        String returnP = "CREATE TABLE IF NOT EXISTS ReturnPercentage (\n"
                + "	ReturnPercentageId integer NOT NULL PRIMARY KEY,\n"
                + "	DublinReturnPercentage double,\n"
                + "	BelfastReturnPercentage double,\n"
                + "	CorkReturnPercentage double,\n"
                + "	DateRequestReturn text\n"
                + ");";
        String percentageP = "CREATE TABLE IF NOT EXISTS BranchProfitPercent (\n"
                + "	ProfitId integer NOT NULL PRIMARY KEY,\n"
                + "	DublinProfit double,\n"
                + "	BelfastProfit double,\n"
                + "	CorkProfit double,\n"
                + "	DateRequestProfit text\n"
                + ");";
        String branchTP = "CREATE TABLE IF NOT EXISTS BranchTotalSales (\n"
                + "	SalesId integer NOT NULL PRIMARY KEY,\n"
                + "	DublinSales decimal,\n"
                + "	BelfatSales decimal,\n"
                + "	CorkSales decimal,\n"
                + "	DateRequestSales text,\n"
                + "	CommuntyWinner text\n"
                + ");";

        String staffNeded = "CREATE TABLE IF NOT EXISTS StaffNeeded (\n"
                + "	StaffNeededId integer NOT NULL PRIMARY KEY,\n"
                + "	DublinStaffNeeded decimal,\n"
                + "	BelfastStaffNeeded decimal,\n"
                + "	DateRequestStaffNeeded text\n"
                + ");";

        try ( Connection conn = DriverManager.getConnection(url2);  Statement stmt10 = conn.createStatement()) {
            stmt10.execute(branchTP);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        try ( Connection conn = DriverManager.getConnection(url2);  Statement stmt15 = conn.createStatement()) {
            stmt15.execute(staffNeded);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        Statement stmt10 = null;
        try ( Connection conn = DriverManager.getConnection(url2);  Statement stmt11 = conn.createStatement()) {
            stmt11.execute(percentageP);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        Statement stmt11 = null;

        try ( Connection conn = DriverManager.getConnection(url2);  Statement stmt12 = conn.createStatement()) {
            stmt12.execute(returnP);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }

        try ( Connection conn = DriverManager.getConnection(url2);  Statement stm13 = conn.createStatement()) {
            stm13.execute(staffSales);

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_createDatabaseActionPerformed

    private void q5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_q5ActionPerformed

        try ( Connection conn = DriverManager.getConnection(url)) {

            PreparedStatement st = conn.prepareStatement("SELECT PurchasesTable.PurchaseTotal, PurchasesTable.BranchId, Branch.CommunityPopulation FROM PurchasesTable"
                    + " INNER JOIN Branch ON PurchasesTable.BranchId = Branch.BranchId;");
            //st.setString(1, str2); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query 
            branch1.clear();
            branch2.clear();
            branch3.clear();
            ResultSet rs = st.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs.next()) { //iterate rs

                String s = rs.getString(1);
                String s1 = rs.getString(2);
                String s2 = rs.getString(3);//get id from rs, save as s   
                System.out.println(s);
                System.out.println(s1);
                System.out.println(s2);

                if (s1.matches("01")) {
                    branch1.add(Double.parseDouble(s));
                    populationDub = Double.parseDouble(s2);

                }
                if (s1.matches("02")) {
                    branch2.add(Double.parseDouble(s));
                    populationBelfast = Double.parseDouble(s2);
                }
                if (s1.matches("03")) {
                    branch3.add(Double.parseDouble(s));
                    populationCork = Double.parseDouble(s2);
                }

            }
            double totalPopulation = populationDub + populationBelfast + populationCork;
            double dubPercentageMarket = (populationDub / totalPopulation) * 100;
            double belfastPercentageMarket = (populationBelfast / totalPopulation) * 100;
            double corkPercentageMarket = (populationCork / totalPopulation) * 100;

            System.out.println(dubPercentageMarket);
            System.out.println(belfastPercentageMarket);
            System.out.println(corkPercentageMarket);
            double staffAvPercent = corkPercentageMarket / 2;
            double dubStaffNeeded = dubPercentageMarket / staffAvPercent;
            System.out.println(dubStaffNeeded);
            double belfastStaffNeeded = belfastPercentageMarket / staffAvPercent;
            System.out.println(belfastStaffNeeded);

//            System.out.println(populationDub);
//
            for (int i = 0; i < branch1.size(); i++) {
                double b1 = branch1.get(i);

                branch11 = branch11 + b1;

            }
            for (int j = 0; j < branch2.size(); j++) {
                double b2 = branch2.get(j);

                branch22 = branch22 + b2;

            }
            for (int k = 0; k < branch3.size(); k++) {
                double b3 = branch3.get(k);

                branch33 = branch33 + b3;

            }
            QMart5(dubStaffNeeded, belfastStaffNeeded);

//            populationAverageA = branch11 / populationDub;
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_q5ActionPerformed

    public void QMart5(double a, double b) {
        try ( Connection conn = DriverManager.getConnection(url2)) {

            PreparedStatement st4 = conn.prepareStatement("SELECT * FROM StaffNeeded;");

            ArrayList<Double> count = new ArrayList<>();

            ResultSet rs4 = st4.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs4.next()) { //iterate rs
                String s = rs4.getString(1);
                String s1 = rs4.getString(2);
                String s2 = rs4.getString(3);
                String s4 = rs4.getString(4);
                count.add(Double.parseDouble(s));
            }

            System.out.println("hi" + Integer.valueOf(count.size()));
            System.out.println(String.valueOf(java.time.LocalDate.now()));
            String date11 = String.valueOf(java.time.LocalDate.now());
            System.out.println(date11);
            //Statement – Used to execute string-based SQL queries
            Statement statement = conn.createStatement();
            statement.executeUpdate("INSERT INTO StaffNeeded VALUES(" + count.size() + 1 + ", " + a + ", " + b + ",'" + date11 + "');");
            JOptionPane.showMessageDialog(null, "BranchTotalSales Table Information was Inserted"); //let user know 

            PreparedStatement st3 = conn.prepareStatement("SELECT * FROM StaffNeeded;");
            //st.setString(1, str2); //pass id string to statement, why 1? multiple statements? location?
            //Excuting Query 
            count.clear();

            ResultSet rs3 = st3.executeQuery(); //get result set rs by executing the Prepared Statement
            while (rs3.next()) { //iterate rs
                String s = rs3.getString(1);
                String s1 = rs3.getString(2);
                String s2 = rs3.getString(3);
                String s3 = rs3.getString(4);

                output.setText("\nStaff Needed \nId: " + s + "\nDublin Staff Needed: " + s1 + "\nBealfast Staff Needed: " + s2 + "\nDate Requested: " + s3);

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }//end try catch
    }

    public static void main(String args[]) {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DataMartStatistics.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DataMartStatistics.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DataMartStatistics.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DataMartStatistics.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DataMartStatistics().setVisible(true);

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createDatabase;
    private javax.swing.JButton exit;
    private javax.swing.JLabel heading;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea output;
    private javax.swing.JButton q1;
    private javax.swing.JButton q2;
    private javax.swing.JButton q3;
    private javax.swing.JButton q4;
    private javax.swing.JButton q5;
    // End of variables declaration//GEN-END:variables
}
